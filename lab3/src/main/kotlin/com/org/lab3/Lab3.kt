package com.org.lab3

import kotlin.math.*


class Lab3 {

    /**
     * @author Novikov "iVanFromJapan" Ivan
     * @version 1.ü§®¬Ø\_(„ÉÑ)_/¬Øü§®        */
    /**–ó–∞–¥–∞–Ω–∏–µ 1
     * –í—ã—á–∏—Å–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ
     * @param x - –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ
     * @param y - –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ
     */
    fun ex1(x: Double, y: Double) {
        val z = (8 * ((1 - tan(x)).pow(1.0 / tan(y)))) + cos(x - y)
        println(z)
        logger.info("–ó–∞–¥–∞–Ω–∏–µ 1 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã $z")
    }

    /**–ó–∞–¥–∞–Ω–∏–µ 2
     * –î–∞–Ω—ã –¥–≤–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ x –∏ —É. –í—ã—á–∏—Å–ª–∏—Ç—å –∏—Ö —Å—É–º–º—É, —Ä–∞–∑–Ω–æ—Å—Ç—å, –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏
     * —á–∞—Å—Ç–Ω–æ–µ.
     * @param x - –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ
     * @param y - –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ
     */
    fun ex2(x: Double, y: Double) {
        val summ = x + y
        val multip = x * y
        val substr = x - y
        val divis = x / y
        println("–°—É–º–º–∞ —á–∏—Å–µ–ª —Ä–∞–≤–Ω–∞ $summ")
        println("–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–µ–ª —Ä–∞–≤–Ω–æ $multip")
        println("–†–∞–∑–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª —Ä–∞–≤–Ω–∞ $substr")
        println("–ß–∞—Å—Ç–Ω–æ–µ —á–∏—Å–µ–ª —Ä–∞–≤–Ω–æ $divis")
        logger.info("–ó–∞–¥–∞–Ω–∏–µ 2 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã $summ $multip $substr $divis")
    }

    /**–ó–∞–¥–∞–Ω–∏–µ 3
     * –î–∞–Ω–æ —Ç—Ä–µ—Ö–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ N. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –±—É–¥–µ—Ç –ª–∏ —Å—É–º–º–∞ –µ–≥–æ —Ü–∏—Ñ—Ä —á–µ—Ç–Ω—ã–º —á–∏—Å–ª–æ–º.
     * @param x - —á–∏—Å–ª–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     */
    fun ex3(x: Int) {
        var x1 = x
        var a = 0
        if (x < 100) {
            logger.error("–ó–∞–¥–∞–Ω–∏–µ 3,  –æ—à–∏–±–∫–∞. –í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ç—Ä–µ—Ö–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ")
            return error("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ç—Ä–µ—Ö–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ!!!")

        }
        while (x1 > 0) {
            a += x % 10
            x1 /= 10
        }
        if (a % 2 == 0) {
            println("da")
            logger.info("–ó–∞–¥–∞–Ω–∏–µ 3 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã: da")
        } else {
            println("net")
            logger.info("–ó–∞–¥–∞–Ω–∏–µ 3 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã: net")
        }
    }

    /**–ó–∞–¥–∞–Ω–∏–µ 4
     * –î–∞–Ω–æ —á–∏—Å–ª–æ x. –ù–∞–ø–µ—á–∞—Ç–∞—Ç—å –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è —á–∏—Å–ª–∞: sin x, cos x, ln x. –ï—Å–ª–∏ –ø—Ä–∏
     * –∫–∞–∫–æ–º-–ª–∏–±–æ x –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –≤—ã—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –∏–º–µ—é—Ç —Å–º—ã—Å–ª–∞, –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º –∏
     * —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç —Å–º—ã—Å–ª.
     * @param x - —á–∏—Å–ª–æ –¥–ª—è —Ä–∞—Å—Å—á–µ—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏–π
     */
    fun ex4(x: Double) {

        val sn = sin(x)
        val cs = cos(x)
        val lnn = ln(x)
        val res = mutableListOf<Double>()
        if (lnn.isNaN()) {
            println("–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –ª–æ–≥–∞—Ä–∏—Ñ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø—Ä–∏ —Ç–∞–∫–æ–º –•")
            res.add(sn)
            res.add(cs)
        } else {
            res.add(sn)
            res.add(cs)
            res.add(lnn)
        }
        res.sort()
        println(res)
        logger.info("–ó–∞–¥–∞–Ω–∏–µ 4 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã: $res")
    }

    /**–ó–∞–¥–∞–Ω–∏–µ 5
     * –ü—É—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫—Ä—É–≥–∞ —è–≤–ª—è—é—Ç—Å—è —Ä–∞–¥–∏—É—Å (–ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç), –¥–∏–∞–º–µ—Ç—Ä (–≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç) –∏
     * –¥–ª–∏–Ω–∞ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ (—Ç—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç). –°–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ –Ω–æ–º–µ—Ä—É —ç–ª–µ–º–µ–Ω—Ç–∞
     * –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∞ –±—ã –µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –≤—ã—á–∏—Å–ª—è–ª–∞ –±—ã –ø–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞.
     * @param rad - —Ä–∞–¥–∏—É—Å –∫—Ä—É–≥–∞
     * @param diam - –¥–∏–∞–º–µ—Ç—Ä –∫—Ä—É–≥–∞
     * @param len - –¥–ª–∏–Ω–Ω–∞ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏
     */
    fun ex5(rad: Double, diam: Double, len: Double) {
        println("1 - –ß–µ—Ä–µ–∑ —Ä–∞–¥–∏—É—Å")
        println("2 - –ß–µ—Ä–µ–∑ –¥–∏–∞–º–µ—Ç—Ä")
        println("3 - –ß–µ—Ä–µ–∑ –¥–ª–∏–Ω—É –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏")
        val a = readln().toInt()
        var res = 0.0

        when (a) {
            1 -> {
                res = PI * rad.pow(2)
                println(res)

            }

            2 -> {
                res = 0.25 * PI * diam.pow(2)
                println(res)
            }

            3 -> {
                res = (len.pow(2)) / (4 * PI)
                println(res)
            }

            else -> println("CrItIcAl ErRoR")
        }
        logger.info("–ó–∞–¥–∞–Ω–∏–µ 5 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã: $res")
    }

    /**–ó–∞–¥–∞–Ω–∏–µ 6
     * –î–∞–Ω—ã –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ n, k. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –≤ –∑–∞–ø–∏—Å–∏ —á–∏—Å–ª–∞ nk —Ü–∏—Ñ—Ä–∞ m.
     * @param str1 - –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
     * @param str2 - –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
     */
    fun ex6(str1: String, str2: String) {
        var str = str1
        println("–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ")
        val a = readln().toCharArray()
        var res: Boolean = false
        str += str2
        for (char in str.toCharArray()) {
            if (char == a[0]) {
                res = true
            }
        }
        if (res) {
            logger.info("–ó–∞–¥–∞–Ω–∏–µ 6 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã: –ß–∏—Å–ª–æ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ $str")
            println("–ß–∏—Å–ª–æ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ $str")
        } else {
            logger.info("–ó–∞–¥–∞–Ω–∏–µ 6 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã: –ß–∏—Å–ª–æ –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ $str")
            println("–ß–∏—Å–ª–æ –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ $str")
        }
    }

    /**–ó–∞–¥–∞–Ω–∏–µ 7
     * –î–∞–Ω–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ N. –í—ã—á–∏—Å–ª–∏—Ç—å:
     * @param n - —á–∏—Å–ª–æ –¥–ª—è —Ä–∞—Å—Å—á–µ—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏–π
     */
    fun ex7(n: Int) {
        var sn = 0.0
        var sum = 0.0
        for (i in 1..n) {
            sn += sin(i.toDouble())
            sum += 1 / sn
        }
        logger.info("–ó–∞–¥–∞–Ω–∏–µ 7 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã: $sum")
        println(sum)
    }

    /**–ó–∞–¥–∞–Ω–∏–µ 8
     * –î–∞–Ω–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ S. –î–∞–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å 5, 9, 13, 17,... –°–∫–æ–ª—å–∫–æ —Å–ª–∞–≥–∞–µ–º—ã—Ö
     * —Å–ª–µ–¥—É–µ—Ç –≤–∑—è—Ç—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–º—É, —Ä–∞–≤–Ω—É—é –ª–∏–±–æ –ø—Ä–µ–≤—ã—à–∞—é—â—É—é S? –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≤–µ—Å—Ç–∏
     * –Ω–∞ —ç–∫—Ä–∞–Ω.
     * @param n - —á–∏—Å–ª–æ –¥–ª—è —Ä–∞—Å—Å—á–µ—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏–π
     */
    fun ex8(n: Int) {
        var a = 5
        var k = 0
        while (a < n) {
            a += 4
            k++
        }
        logger.info("–ó–∞–¥–∞–Ω–∏–µ 8 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã: $k")
        println(k)
    }
}