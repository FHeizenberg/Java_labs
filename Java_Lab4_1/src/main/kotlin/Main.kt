import org.jsoup.Jsoup
import java.io.File
import java.io.FileWriter
import java.io.IOException
/**
 * @author Novikov "iVanFromJapan" Ivan
 * @version 1.ü§°         */

object HTMLLinkParser {
    @Throws(IOException::class)
    @JvmStatic
            /** –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–¥–∞–µ—Ç—Å—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π html-—Ñ–∞–π–ª, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å–µ —Å—Å—ã–ª–∫–∏
             *  http:// –Ω–µ –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ —Ç–µ–≥–µ <a> –æ–±–µ—Ä–Ω—É—Ç—å —Ç–µ–≥–æ–º <a> –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º—è –¥–æ–º–µ–Ω–∞ –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ ¬´/¬ª.
             *  –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ https://www.bsu.edu.ru/bsu/resource/schedule/teachers/index.php?teacher=150016
             *  –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ <a href='https://www.bsu.edu.ru/bsu/resource/schedule/teachers/index.php?teacher=150016'>bsu.edu.ru</a>
             *  –í—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É:
             *  - —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫–∏ —Å —Ç–µ–≥–æ–º <a> –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
             *  - —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫–∏ –±–µ–∑ —Ç–µ–≥–∞ <a> –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏ –∏—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
             *  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π html-—Ñ–∞–π–ª.
             * .*/
    fun main(args: Array<String>) {
        val input = File("src/main/resources/index.html")
        /**
         * @see "https://jsoup.org/apidocs/"
        */
        val doc = Jsoup.parse(input, "UTF-8", "")

        val links = doc.select("a[href]")
        val linkCounts: MutableMap<String, Int> = HashMap()
        for (link in links) {
            val href = link.attr("href")
            if (!href.startsWith("http://") || link.tagName().equals("a", ignoreCase = true)) {
                continue
            }
            var domain = href.substring(7)
            val slashIndex = domain.indexOf('/')
            if (slashIndex != -1) {
                domain = domain.substring(0, slashIndex)
            }
            link.attr("href", href)
            link.text(domain)
            val count = linkCounts.getOrDefault(href, 0)
            linkCounts[href] = count + 1
        }

        println("Links with <a> tag: " + links.size)
        for (tags in linkCounts) {
            println(tags.key + " with <a> tag count: " + tags.value)
        }
        val otherLinks = doc.select("a:not([href])")
        println("Links without <a> tag: " + otherLinks.size)

        val writer = FileWriter("output.html")
        writer.write(doc.outerHtml())
        writer.close()
    }
}