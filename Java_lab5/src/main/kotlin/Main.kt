import java.util.*

object HoneybeesSimulation {
    /**
     * @author Novikov "iVanFromJapan" Ivan
     * @version 1.ü§®¬Ø\_(„ÉÑ)_/¬Øü§®        */

    /** –ü–æ–ª–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—á–µ–ª   */
    private const val NUM_BEES = 3
    /** –ü–æ–ª–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Ä—Ü–∏–∏ –º–µ–¥–∞   */
    private const val HONEY_PORTION_SIZE = 1
    /** –ü–æ–ª–µ —Å–∫—Ä–æ—Å—Ç–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –º–µ–¥–∞   */
    private const val HONEY_CONSUMPTION_RATE = 3
    /** –ü–æ–ª–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –ø—á–µ–ª—ã   */
    private const val MAX_DELAY_TIME = 500
    /** –ü–æ–ª–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ–¥–∞   */
    private var honeyPot = 0
    @JvmStatic
    fun main(args: Array<String>) {
        val bees = arrayOfNulls<Thread>(NUM_BEES)

        for (i in 0 until NUM_BEES) {
            bees[i] = Thread(Bee(i))
        }

        for (bee in bees) {
            bee!!.start()
        }

        while (true) {
            try {
                Thread.sleep(500)
                consumeHoney()
            } catch (e: InterruptedException) {
                e.printStackTrace()
            }
        }
    }

    /**
     * –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –º–µ–¥–∞ –í–∏–Ω–Ω–∏-–ü—É—Ö–æ–º
     */
    private fun consumeHoney() {
        synchronized(HoneybeesSimulation::class.java) {
            if (honeyPot >= HONEY_CONSUMPTION_RATE) {
                honeyPot -= HONEY_CONSUMPTION_RATE
                println("–í–∏–Ω–Ω–∏-–ü—É—Ö —Å—ä–µ–ª –ø–æ—Ä—Ü–∏—é –º–µ–¥–∞. –û—Å—Ç–∞–ª–æ—Å—å " + honeyPot + " –ø–æ—Ä—Ü–∏–π –º–µ–¥–∞.")
            } else {
                println("–í –≥–æ—Ä—à–∫–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ–¥–∞ –¥–ª—è –í–∏–Ω–Ω–∏-–ü—É—Ö–∞!")
            }
        }
    }

    /**
     * –ö–ª–∞—Å—Å —Ä–∞–±—Ç—ã –ø—á–µ–ª—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
     * @param beeNumber –Ω–æ–º–µ—Ä –ø—á–µ–ª—ã
     */
    private class Bee(private val beeNumber: Int) : Runnable {
        override fun run() {
            val random = Random()
            while (true) {
                try {
                    Thread.sleep(random.nextInt(MAX_DELAY_TIME).toLong())
                    collectHoney()
                } catch (e: InterruptedException) {
                    e.printStackTrace()
                }
            }
        }
        /**
         * –º–µ—Ç–æ–¥ –¥–ª—è —Å–±–æ—Ä–∞ –º–µ–¥–∞ –ø—á–µ–ª–æ–π
         */
        private fun collectHoney() {
            synchronized(HoneybeesSimulation::class.java) {
                honeyPot += HONEY_PORTION_SIZE
                println("–ü—á–µ–ª–∞ " + beeNumber + " –ø—Ä–∏–Ω–µ—Å–ª–∞ –ø–æ—Ä—Ü–∏—é –º–µ–¥–∞. –í –≥–æ—Ä—à–∫–µ " + honeyPot + " –ø–æ—Ä—Ü–∏–π –º–µ–¥–∞.")
            }
        }
    }
}